openapi: "3.0.3"
info:
    title: Comics Paper Server
    version: "1.0"
servers:
    - url: https://localhost:3000/v1
paths:
    /users/signup:
        post:
            description: "Sign up for new account and provides a information which were just generated."
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserSignUpInterface"

            responses:
                "201":
                    description: Successfully registration
                    content:
                        application/json:
                            schema:
                                type: object
                                $ref: "#/components/schemas/UserResponseInterface"

                "400":
                    description: Missing username, password or email
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /users/signin:
        post:
            description: "Check the existence of user and provides a API token as JsonWebToken. The token expiration is one hour after generated"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            $ref: "#/components/schemas/UserRequestSignInInterface"
            responses:
                "200":
                    description: "Successfully sign in"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TokenResponseInterface"
                "400":
                    description: Invalid username or password
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /users/profile:
        get:
            description: "Get user profile"
            security:
                - BearerAuth: [http]
            responses:
                "200":
                    description: "Successfully get user profile"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
        put:
            description: Using to update the profile of user. If you want to change password, using /users/change-password. <b>This method request a permission to change profile</b>.
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ProfileModifyInterface"

            responses:
                "204":
                    description: "Successfully changed profile of user without responses"
                "404":
                    description: "User not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "400":
                    description: Body is invalid.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "304":
                    description: "No modified. Using when the body is empty"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
        post:
            description: "Check the existence of user and retrieves user profile information."
            security:
                - BearerAuth: [http]

            responses:
                "200":
                    description: "Successfully validate a token and provides user profile information"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ProfileResponseInterface"

                "400":
                    description: No token provide.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"

                "401":
                    description: Unauthenticated user
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /users/{id}:
        get:
            description: "Retrieves general user information (id, username, and nickname)"
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                500:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                # type: object
                                $ref: "#/components/schemas/Error"
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                # type: object
                                $ref: "#/components/schemas/Error"
                200:
                    description: "Successfully retrieve user information"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserGeneralInterface"

    /users/change-password:
        put:
            description: "Change password of user. <b>This method request a permission to change password</b>"
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PasswordChangeInterface"
            responses:
                "204":
                    description: "Successfully changed password of user without responses"
                "404":
                    description: "User not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "400":
                    description: Body is invalid.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"

    /permissions/roles:
        get:
            description: Retrieves all current permission roles in database.
            security:
                - BearerAuth: [http]
            responses:
                "200":
                    description: "Successfully retrieve permission roles"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PermissionGroupInterface"
        post:
            description: Creates new permission group.
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PermissionGroupInterface"

            responses:
                "200":
                    description: "Successfully created new permission group"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PermissionGroupInterface"
                "400":
                    description: Body is invalid.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"

                "401":
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /permissions/:
        get:
            description: Retrieves all current permission in database.
            security:
                - BearerAuth: [http]
            responses:
                "200":
                    description: "Successfully retrieve permission"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PermissionInterface"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /permissions/roles/{roleId}:
        get:
            description: Retrieves the permission by roles' id.
            parameters:
                - in: path
                  name: roleId
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                "200":
                    description: "Successfully retrieve permission"
                    content:
                        application/json:
                            schema:
                                type: array
                                $ref: "#/components/schemas/PermissionInterface"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /resources/:
        post:
            description:
                Creates new resource file in database. The accepted files are jpeg or png. The file size is less than 5MB.
                <b>Request a permission to create new resource.</b>. Accept image/jpeg, image/gif, or image/png filetype.
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                files:
                                    type: array
                                    format: binary
                                    description: "The file list to upload"
            responses:
                "201":
                    description: "File lists as array after uploaded"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ResourceResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
        get:
            description: Retrieves all resource files in database as metadata.
                <b>Request a permission to get all resource files in database.</b>
            security:
                - BearerAuth: [http]
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      format: int32
                      default: 1
                  description: "The page number to retrieve"
                - in: query
                  name: limit
                  schema:
                      type: integer
                      format: int32
                  description: "The number of items per page"
                - in: query
                  name: orderBy
                  schema:
                      type: string
                - in: query
                  name: order
                  schema:
                      type: string
                      enum:
                          - asc
                          - desc
                  description: "The order of items"
            responses:
                "200":
                    description: "Successfully retrieve resource files"
                    content:
                        application/json:
                            schema:
                                properties:
                                    length:
                                        type: number
                                        format: int32
                                    resources:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ResourceResponseInterface"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /resources/metadata/{id}:
        get:
            description: Get resource file from file system.
            security:
                - BearerAuth: [http]
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                "200":
                    description: "Retrieves a resource as binary (or buffer)"
                    content:
                        image/*:
                            schema:
                                $ref: "#/components/schemas/ResourceResponseInterface"
                "404":
                    description: "Resource not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "400":
                    description: "Bad request"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /resources/{id}:
        get:
            description: Get resource file from file system.
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                "200":
                    description: "Retrieves a resource as binary (or buffer)"
                    content:
                        image/*:
                            schema:
                                type: string
                                format: binary
                "404":
                    description: "Resource not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "400":
                    description: "Bad request"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"

    /comics/:
        post:
            description: Creates new comic in database.
                <b>Request a permission to create new comic.</b>
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ComicRequestInterface"
            responses:
                "201":
                    description: "Successfully created comic"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ComicResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /comics/{id}:
        get:
            description: Retrieves the comic by id.
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                "200":
                    description: "Successfully retrieve comic"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ComicResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "404":
                    description: "Comic not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
        put:
            description: Updates the comic by id.
                <b>This method request a permission to update</b>
            security:
                - BearerAuth: [http]
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ComicRequestInterface"
            responses:
                "200":
                    description: "Successfully updated comic"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ComicResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "404":
                    description: "Comic not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
        delete:
            description: Deletes the comic by id.
                <b>This method request a permission to delete</b>
            security:
                - BearerAuth: [http]

            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                "200":
                    description: "Successfully deleted comic"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ComicResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "404":
                    description: "Comic not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /comics/{id}/viewed:
        post:
            description: Increase a view count of comic 1 unit.
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ComicRequestInterface"
            responses:
                "204":
                    description: "Successfully updated comic"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "404":
                    description: "Comic not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"

    /comics/{id}/chapters:
        post:
            description: Creates new chapter in comic.
            security:
                - BearerAuth: [http]
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ChapterRequestInterface"
            responses:
                "404":
                    description: "Comic not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "201":
                    description: "Successfully created chapter"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ChapterResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
        get:
            description: Retrieves the chapters of a comic.
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: true
                - in: query
                  name: limit
                  schema:
                      type: integer
                      format: int32
                  required: false
                - in: query
                  name: page
                  schema:
                      type: integer
                      format: int32
                  required: false
                - in: query
                  name: sortedBy
                  schema:
                      type: string
                  required: false
                - in: query
                  name: order
                  schema:
                      enum:
                          - asc
                          - desc
                  required: false
            responses:
                "200":
                    description: "Successfully retrieve chapters"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ChapterResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "404":
                    description: "Comic not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /comics/chapters/chapter/{chapterId}:
        get:
            description: Retrieves the chapter by id.
            parameters:
                - in: path
                  name: chapterId
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                "200":
                    description: "Successfully retrieve chapter"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ChapterResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "404":
                    description: "Chapter not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"

    /comics/chapters/viewType:
        get:
            description: Retrieves the view types of a comic chapter.
            responses:
                "200":
                    description: "Successfully retrieve view types"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ViewTypeResponseInterface"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"

    /users/permissions:
        post:
            description: Sets a permission group for user.
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserPermissionRequestInterface"
            responses:
                "204":
                    description: "Successfully updated user"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /permissions/roles/grant:
        post:
            description: Grants a permission group to a role.
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RolePermissionRequestInterface"
            responses:
                "204":
                    description: "Successfully updated role"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "404":
                    description: "Role or permission not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /permissions/roles/revoke:
        delete:
            description: Revokes a permission group from a role.
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RolePermissionRequestInterface"
            responses:
                "204":
                    description: "Successfully updated role"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "404":
                    description: "Role or permission not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /comics/tags:
        post:
            description: Creates a comic tag.
            security:
                - BearerAuth: [http]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ComicTagRequestInterface"
            responses:
                "200":
                    description: "Successfully created comic tag"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ComicTagResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /comics/{comicId}/tags/{tagId}:
        post:
            description: Creates reference between comic and tag.
            security:
                - BearerAuth: [http]
            parameters:
                - in: path
                  name: tagId
                  schema:
                      type: string
                      format: uuid
                  required: true
                - in: path
                  name: comicId
                  schema:
                      type: string
                      format: uuid
                  required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ComicTagRequestInterface"
            responses:
                "204":
                    description: "Successfully updated comic tag"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
        delete:
            description: Deletes reference between comic and tag.
            security:
                - BearerAuth: [http]
            parameters:
                - in: path
                  name: tagId
                  schema:
                      type: string
                      format: uuid
                  required: true
                - in: path
                  name: comicId
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                "204":
                    description: "Successfully deleted comic tag"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /comics/{comicId}/tags/:
        get:
            description: Retrieves comic tags.
            security:
                - BearerAuth: [http]
            parameters:
                - in: path
                  name: comicId
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                "200":
                    description: "Successfully retrieved comic tags"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ComicTagResponseInterface"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "403":
                    description: "Forbidden"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                "500":
                    description: "Internal server error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"

    /comics/search:
        get:
            description: Retrieves an object from either an id of a slug or id.
            parameters:
                - in: query
                  name: id
                  schema:
                      type: string
                      format: uuid
                  required: false
                - in: query
                  name: slug
                  schema:
                      type: string
                      format: slug
                  required: false
            responses:
                200:
                    description: "Successfully retrieved comic"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ComicResponseInterface"
                404:
                    description: "Comic not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
# A components schemas
components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
    schemas:
        UserSignUpInterface:
            type: object
            properties:
                username:
                    type: string
                    description: A username of the user to sign up.
                password:
                    type: string
                    description: A password for authentication.
                email:
                    type: string
                    format: email
                    description: A email of user to create.
                nickname:
                    type: string
                    description: A nickname of user, primary display on website.
                introduction:
                    type: string
                    description: "A short introduction of the user"
            required:
                - username
                - password
                - email
                - nickname
        UserResponseInterface:
            type: "object"
            properties:
                id:
                    type: "string"
                    format: "uuid"
                    description: "Unique identifier of that player, as UUID v4()."
                username:
                    type: string
                    description: "A username of the user"
                email:
                    type: string
                    format: email
                    description: "An email of the user"
                nickname:
                    type: string
                    description: "A nickname, which is alphanumeric, lower than 20 characters, contains dots (.) and underscores (_)"

        UserRequestSignInInterface:
            type: "object"
            properties:
                username:
                    type: "string"
                    description: "Username of the user"
                password:
                    type: "string"
                    format: "password"
                    description: "Password of the user"
            required:
                - username
                - password

        TokenResponseInterface:
            type: object
            properties:
                token:
                    type: string
                    format: "jwt"
                    description: "A token for user to sign in, put it into header token when request."

        Error:
            type: object
            properties:
                message:
                    type: string
                    description: "A message of the error occurred."

        ProfileResponseInterface:
            allOf:
                - $ref: "#/components/schemas/UserResponseInterface"
                - type: "object"
                  properties:
                      role:
                          enum:
                              - 1
                              - 2
                              - 3
        PermissionGroupInterface:
            type: object
            properties:
                id:
                    type: integer
                name:
                    type: string
                description:
                    type: string
            required:
                - name
                - description
        UserGeneralInterface:
            type: object
            properties:
                username:
                    type: string
                nickname:
                    type: string
        ProfileModifyInterface:
            type: object
            properties:
                nickname:
                    type: string
                    description: A new nickname in order to change.
                introduction:
                    type: string
                    description: A new introduction in order to change.

        PasswordChangeInterface:
            type: object
            properties:
                oldPassword:
                    type: string
                    format: password
                    description: "The old password of user"
                newPassword:
                    type: string
                    format: password
                    description: "The new password of user"
                confirmPassword:
                    type: string
                    format: password
                    description: "The confirm password of user"

            required:
                - oldPassword
                - newPassword
                - confirmPassword

        ResourceResponseInterface:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                name:
                    type: string
                # path:
                #   type: string
                #   format: url
                size:
                    type: integer
                    format: byte
                uploadAt:
                    type: string
                    format: date-time
                uploader:
                    type: string
                    format: uuid
        PermissionInterface:
            type: object
            properties:
                id:
                    type: integer
                name:
                    type: string
                description:
                    type: string
        ComicRequestInterface:
            type: object
            properties:
                title:
                    type: string
                    description: A title of the comic
                description:
                    type: string
                    description: A description of the comic
                thumbnail:
                    type: string
                    description: A thumbnail of the comic as resource id
            required:
                - title
                - description
                - thumbnail
        ComicResponseInterface:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                name:
                    type: string
                description:
                    type: string
                thumbnail:
                    type: string
                    format: uuid
                updatedAt:
                    type: string
                    format: date-time
                createdAt:
                    type: string
                    format: date-time
                postedBy:
                    type: string
                    format: uuid
        ChapterRequestInterface:
            type: object
            properties:
                name:
                    type: string
                    description: A name of the chapter
                viewType:
                    enum:
                        - image
                        - text
                    description: A view type of the chapter, 1 as image. otherwise as text.
                thumbnail:
                    type: string
                    description: A thumbnail of the chapter as resource id
                content:
                    type: string
                    description: A content of the chapter
            required:
                - title
                - description
                - thumbnail
                - content
        ChapterResponseInterface:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                name:
                    type: string
                viewType:
                    type: integer
                    format: int32
                thumbnail:
                    type: string
                    format: uuid
                content:
                    type: string
                updatedAt:
                    type: string
                    format: date-time
                createdAt:
                    type: string
                    format: date-time
                postedBy:
                    type: string
                    format: uuid
                length:
                    type: integer
                    format: int32
                blocks:
                    type: array
        ViewTypeResponseInterface:
            type: object
            description: The view type
                of the chapter, instruct chapter what type to display.
            properties:
                id:
                    type: string
                    format: uuid
                    description: View type id
                name:
                    type: string
                    description: View type name
        UserPermissionRequestInterface:
            type: object
            properties:
                userId:
                    type: integer
                    format: uuid
                    description: A user uuid
                permissionId:
                    type: integer
                    format: int32
                    description: A permission group id (not permission).
            required:
                - userId
                - permissionId
        RolePermissionRequestInterface:
            type: object
            properties:
                permissionId:
                    type: string
                    format: number
                permissionGroupId:
                    type: string
                    format: number
            required:
                - permissionId
                - permissionGroupId
        ComicTagRequestInterface:
            type: object
            properties:
                keyword:
                    type: string
                    description: A keyword of the comic
            required:
                - keyword

        ComicTagResponseInterface:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                keyword:
                    type: string
            required:
                - keyword
                - id
